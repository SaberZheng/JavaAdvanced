NIO:new input/output 
 jdk1.4开始提供的:(nio)
	java.nio:Buffer
		
	 Buffer中定义的属性
		
		capacity表示缓冲区容量    缓冲区的容量 是它所包含的元素的数量。缓冲区的容量不能为负并且不能更改。
		
		limit表示缓冲区的限制    缓冲区的限制 是第一个不应该读取或写入的元素的索引。缓冲区的限制不能为负，并且不能大于其容量。
		
		position表示缓冲区的当前位置    缓冲区的位置 是下一个要读取或写入的元素的索引。缓冲区的位置不能为负，并且不能大于其限制。
		
		mark 表示缓冲区的标志位置
		
     Buffer中定义的方法
		
		int capacity()返回此缓冲区的容量
		
		int limit()返回此缓冲区的限制位置
		
	    Buffer limit(int newLimit) 设置此缓冲区的限制。
	    
	    int position()返回此缓冲区的位置
	    
	    Buffer position(int newPosition)设置此缓冲区的位置。
	    
	    Buffer mark() 将缓冲区中的当前位置作为标记位置(做标记)
	    
	    Buffer reset() 将此缓冲区的当前位置重置为以前标记的位置(回到从前做标记的地方) 
	 
	 Buffer 类中定义的对缓冲区进行控制的方法
	 
	    Buffer flip() 反转缓冲区("锁定"缓冲区中的有效数据)
	    	 limit = position;//1、将当前位置当做限制位置
       		 position = 0;//2、并将当前位置调整到起始位置
        	 mark = -1;//3、清除标记
	   
	    Buffer clear() "清除"缓冲区(将缓冲区的状态调整到初始状态，并没有清除缓冲区的数据)
	    	position = 0;//1、将当前位置调整到起始位置	
        	limit = capacity;//2、并将当前位置更改为容量对应的数值
        	mark = -1;//3、清楚标记
	    
	    Buffer rewind() 重绕此缓冲区(倒带)
       	 	position = 0;//1、将当前位置调整到起始位置	
        	mark = -1;//2、清除标记
        
     
      CharBuffer类继承了Buffer类的所有方法，并在内部提供了一个char数组来缓冲字符
         
         static CharBuffer 	allocate(int capacity)分配新的字符缓冲区。
     
      ByteBuffer类继承了Buffer类的所有方法，并在内部提供了一个Byte数组来缓冲字符
         
         static ByteBuffer 	allocate(int capacity)分配新的字符缓冲区。
	
	java.nio.channels:Channel 、Selector
	
	 jdk 1.4获得Channel
		
		FileInputStream fileIn = new FileInputStream();
		FileChannel Channel = fileIn.getChannel(filename);
		
		FileOutputStream fileOut = new FileOutputStream(filename);
		FileChannel Channel = fileOut.getChannel();
	 
	 jdk 1.7 使用 Files直接获得通道
	 	
	 	 static SeekablstaticeByteChannel 	newByteChannel(Path path, OpenOption... options)打开或创建一个文件,返回一个seekable字节通道来访问该文件
		 
		 SeekablstaticeByteChannel 的其中的一个实现类java.nio.channels.FileChannel
            	
            	abstract MappedByteBuffer 	map(FileChannel.MapMode mode, long position, long size)Map区域直接这个通道的文件到内存中。 
	
	java.nio.charset:Charset
	
	传统的io中
	  1、最终以字节为单位读写数据，效率低下-----> 新的IO提供Buffer、Channel就可以以"块"为单位读写
	  2、传统流的读写操作都是阻塞式的           -----> 新的IO体系中提供Selector来解决阻塞问题

	   从jdk1.4开始使用NIO对传统IO进行改写(对传统IO的一部分进行修改)
 jdk1.7开始提供：(nio)
	
	java.nio.file：Path、 Paths、File
	  
	  Path接口表示一个目录或一个文件对应的路径(它可以定位本地系统中的一个文件或目录)
	  
	  Paths类是一个工具类，其中定义了两个静态方法，专门用来返回Path对象：
	  		
	  		static Path 	get(String first, String... more)转换的路径字符串,或一个字符串序列,当加入形成一个路径字符串, Path。 
			
			static Path 	get(URI uri)将给定的URI转换为 Path对象。 
	  
	  File类是一个工具类，提供了对文件或目录进行操作的大量静态方法
	  
	  	  static boolean 	exists(Path path, LinkOption... options)
	  	    测试文件是否存在。 如果path表示的文件或目录存在则返回true，否则返回false
	
		  static boolean 	notExists(Path path, LinkOption... options)
		    测试文件是否通过这个路径不存在。 如果path表示的文件或目录不存在则返回true，否则返回false
	
		  static boolean 	isDirectory(Path path, LinkOption... options)
  		     测试文件是否是一个目录。 如果oath所表示的是一个目录则返回true否则返回false
	
		 static boolean 	isRegularFile(Path path, LinkOption... options)
		   测试文件是否与不透明的常规文件内容。 如果path所表示的是一个"正常"的文件则返回true,否则返回false
		   
		 static boolean 	isSymbolicLink(Path path)
		  测试是否文件是一个符号链接。 如果path所表示的是一个"符号"文件则返回true(Linux环境下对应的是链接)
		  
		 static Path 	copy(Path source, Path target, CopyOption... options)
                       复制一个文件到目标文件。 
	  	 
	  	 static Path 	createDirectory(Path dir, FileAttribute<?>... attrs)
                        创建一个新的目录(一次创建一级目录)
         Linux (mkdir -p  /files/hell/world/abc)
                        假设C盘中没有files目录，而我们要创建目录c:/files/hell/world/abc
         
         static Path 	createFile(Path path, FileAttribute<?>... attrs)
		   创建一个新的空文件。 
                        
         static void 	delete(Path path)
		   删除path对应的目录或文件      
	  	 
	  	 static boolean 	deleteIfExists(Path path)
		  如果path存在就删除他
 
 		 static boolean 	isExecutable(Path path)
		  测试是否可执行文件(判断path对应的文件是否可执行)
		 
		 static boolean 	isHidden(Path path)
		  告诉一个文件是否被认为是隐藏的。(判断path对应的文件是否隐藏)

         static boolean 	isReadable(Path path)
                        测试文件是否可读。 (判断path对应的文件是否可读)
                        
         static boolean 	isWritable(Path path)
		  测试是否可写的文件。 (判断是否拥有path的写权限)
 
		 static Path 	move(Path source, Path target, CopyOption... options)
		   移动或重命名一个文件到目标文件。 
		   
		 static BufferedWriter 	newBufferedWriter(Path path, Charset cs, OpenOption... options)
		  打开或创建一个文件编写,返回一个 BufferedWriter可用于编写文本文件以一种有效的方式。 
 
		 static BufferedReader 	newBufferedReader(Path path, Charset cs)
		  打开一个文件阅读,返回一个 BufferedReader可能用于读取文本文件的一个有效方式。 
 
		 static InputStream 	newInputStream(Path path, OpenOption... options)
		   打开一个文件,返回一个输入流读取该文件。 
 
 		 static OutputStream 	newOutputStream(Path path, OpenOption... options)
		  打开或创建一个文件,返回一个输出流,可以用来将字节写入文件。 
   		 
   		 static byte[] 	readAllBytes(Path path)
		  从文件中读取的所有字节。 
		  
		 static List<String> 	readAllLines(Path path, Charset cs)
		  从文件读取所有行。 
		  
	  OpenOption接口用来表示打开文件或目录的选项
	  
	  	StandardOpenOption 枚举 直接开启这个文件的有关选项
	  	
	  	LinkOption 枚举 以连接的方式去开启或者创建一个连接 Linux见得比较多
	  	
	  	CopyOption 接口用来表示复制文件或目录时的可选项
	  		实现了LinkOption和StandardCopyOption
	  
	Java.nio.attribute:BasicFileAttributes