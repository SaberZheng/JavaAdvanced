
java.lang.reflect.Type :

		Type 是 Java 编程语言中所有类型的公共高级接口。
		它们包括原始类型、参数化类型、数组类型、类型变量和基本类型


java.lang.Class:
	
		继承了 java.lang.Object 类
		
		实现了 java.lang.reflect.Type 等接口
		
		Class 类的实例表示正在运行的 Java 应用程序中的类和接口。
		
				 枚举 ( enum ) 是一种类，注解 ( @interface )  是一种接口
       
        
        常用的静态方法:
        
	        static  Class<?>	forName( String className ) 
	        		返回与带有给定字符串名的类或接口相关联的 Class 对象
	        		
			static  Class<?>	forName( String name , boolean initialize , ClassLoader loader ) 
	          		使用给定的类加载器，返回与带有给定字符串名的类或接口相关联的 Class 对象


		常用的非静态方法:
		
			String	getName()  以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称
			
			String	getSimpleName()  返回源代码中给出的底层类的简称
			
			String	getCanonicalName()  返回 Java Language Specification 中所定义的底层类的规范化名称
			
			Class<? super T>	getSuperclass()  返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class
			
			Class<?>[]	getInterfaces()  确定此对象所表示的类实现的接口 或 此对象所表示的接口所继承的接口
			
		    ClassLoader	getClassLoader()  返回该类的类加载器
		    
		    int getModifiers() 以 int 形式返回该类的修饰符
		    
		    boolean	isAnnotation() 如果当前类型所表示的是一个 [注解] 则返回 true ，否则返回 false
		    
		    boolean	isArray() 如果当前类型所表示的是一个 [数组] 则返回 true ，否则返回 false
		    
		    boolean	isEnum() 如果当前类型所表示的是一个 [枚举] 则返回 true ，否则返回 false
		    
		    boolean	isInterface() 如果当前类型所表示的是一个 [接口] 则返回 true ，否则返回 false
		    
		    
		    获得某个类中的属性的方法:
		    
		    Field		getDeclaredField( String name ) 获得在本类中直接声明指定名称的属性( Field )对象
		    
		    				private  、默认 、protected 、public
		    
		    Field[]	getDeclaredFields() 获得由本类直接声明的所有的属性组成的 Field 数组
		    
		    Field		getField( String name ) 获得本类中或父类中声明的 public 修饰的指定名称的属性对应的Field对象
		    
		    Field[]	getFields()  获得本类中或父类中声明的、由 public 修饰的所有的属性组成的 Field 数组
		    
		    
		    获得某个类中的方法的方法:
		    
		    Method		getDeclaredMethod( String name , Class<?>... parameterTypes )
		    
		    				获得由本类直接声明的指定名称、指定参数列表的方法对应的 Method 对象
		    
		    Method[]	getDeclaredMethods()
		    
		     				获得由本类直接声明的所有的方法对应的 Method 数组
		    
		    Method		getMethod( String name  , Class<?>... parameterTypes )
		    
		     				获得由本类或父类声明的由 public 修饰的、指定名称、指定参数列表的方法对应的 Method 对象
		    
		    Method[]	getMethods()
		    
		    				获得由本类或父类声明的所有的 public 修饰方法对应的 Method 数组

			获得某个类中的构造方法:
			
			Constructor<T>	getDeclaredConstructor( Class<?>... parameterTypes ) 
			
							获得由本类所声明的所有的构造方法中 参数 与指定的 参数列表 匹配的那个构造方法
							
							这些构造方法的修饰符可以是 private 、默认 、protected 、public
			
			Constructor<?>[]	getDeclaredConstructors() 
			
							获得由本类所声明的所有的构造方法组成的数组
							
							这些构造方法的修饰符可以是 private 、默认 、protected 、public
			
			Constructor<T>	getConstructor( Class<?>... parameterTypes )
			
							从本类的 public 修饰的构造方法中，寻找与 parameterTypes 相匹配的那个构造方法
			
			Constructor<?>[]	getConstructors()
			
							获得本类中所有的 public 修饰的构造方法组成的数组
			
			构造方法特点: 与类名同名 、没有返回类型 、构造不能被继承
			

java.lang.reflect.Modifier

			static String	toString( int mod )  返回描述指定修饰符中的访问修饰符标志的字符串

java.lang.reflect :

	   AccessibleObject 是 Field 、Method 、Constructor 类的父类
	   
	   			boolean	isAccessible()   获取此对象的 accessible 标志的值
	   			
	   					判断指定对象是否可以被访问，比如 private 修饰的属性就不能直接访问
	   			
	   			void	setAccessible( boolean flag )  将此对象的 accessible 标志设置为指示的布尔值
	   			
	   					让一个本来不能访问的对象可以被访问，可以写作 setAccessible( true )

	   Field 表示 类 或  接口 中的属性
	   
	   			int	getModifiers()  以 int 形式返回该 属性 ( Field ) 的修饰符
	   			
	   			Class<?>		getType() 返回当前属性的类型 ( 是一个 Class 类型的对象 )
	   			
	   			String	getName()  返回此 Field 对象表示的属性 的名称
	   			
	   			Object	get( Object o )  返回指定对象( o ) 中，该 Field 表示的属性的值
	   			
	   			void	set( Object o , Object value ) 为指定对象 ( o ) 的 该属性赋值
	   
	   Method 表示 类 或 接口 中的方法
	   
	   			int	getModifiers() 以 int 形式返回该 方法 ( Method ) 的修饰符
	   			
	   			String	getName()
	   			
	   			Class<?>		getReturnType()
	   			
	   			Class<?>[]	getParameterTypes()
	   			
	   			Class<?>[]	getExceptionTypes()
	   			
	   			Object	invoke( Object target , Object... args )
	   
	   Constructor 表示 某个 类的 构造方法
	   
	   			int	getModifiers()  以 int 形式返回该 属性 ( Field ) 的修饰符
	   			
	   			Class<?>[]	getParameterTypes()
	   			
	   			Class<?>[]	getExceptionTypes();

java.lang.reflect.Array : 不表示数组，它提供了操作数组的方法

		static int	getLength( Object array ) 获得 array 对应的数组中元素个数

		static void		set( Object array, int index , Object value ) 
		
				相当于 array[ index ] = value ;

		static Object		get( Object array , int index ) 
			
				相当于 Object o = array[ index ] ;

		static Object		newInstance( Class<?> componentType , int length ) 
		
				比如 Array.newInstance( int.class , 10 ) 相当于 new int[ 10 ] ;

		static Object		newInstance( Class<?> componentType , int... dimensions )
		
				比如 Array.newInstance( char.class , 4 , 5 ) 相当于 new char[ 4 ] [ 5 ] ;
				传多少个dimensions参数就是几维数组  ，dimensions维度
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	AccessibleObject 是 Field 、Method 、Constructor 类的父类
	
		   		boolean	isAccessible()   获取此对象的 accessible 标志的值
	   			
	   					判断指定对象是否可以被访问，比如 private 修饰的属性就不能直接访问
	   			
	   			void	setAccessible( boolean flag )  将此对象的 accessible 标志设置为指示的布尔值
	   			
	   					让一个本来不能访问的对象可以被访问，可以写作 setAccessible( true )

	操作属性:
	
			   	Object	get( Object o )  返回指定对象( o ) 中，该 Field 表示的属性的值
	   			
	   			void	set( Object o , Object value ) 为指定对象 ( o ) 的 该属性赋值
	
	
	执行构造方法:
	
				Constructor<?>	con = getConstructor( Class<?>... parameterTypes ) ;
				
				Object o = con.newInstance( Object... initargs ) ;
				
				或:
				
				Class<?> c = Student.class ;
		
				Object o = c.newInstance(); 
	
	
	执行方法:
	
					Class<?> c = Class.forName( "edu.ecut.entity.Student" );
					
					Constructor<?> con = c.getConstructor( int.class , String.class );
					
					Object s = con.newInstance( 100 , "张翠山" );
	
			先找到指定的方法:
			
				Method eatMethod = c.getDeclaredMethod( "eat" , String.class ) ;
			
			让方法执行起来:
			
				Object result = eatMethod.invoke( s , "藜蒿炒腊肉" ); // s.eat( "藜蒿炒腊肉" );
	

















